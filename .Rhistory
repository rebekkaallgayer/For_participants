year_data<- rep_data[rep_data[,2]==0,]
year_data<- indiv_mov
stat_data<- year_data
nindivs=(unique(stat_data[,4]))
for(i in 1:length(nindivs)){
#print(i)
to_plot=runif(1)
if(to_plot<0.2){
indiv_data<- stat_data[stat_data[,4]==nindivs[i],]
x<- indiv_data[1,-(1:6)][!is.na(indiv_data[1,-(1:5)])]
y<- indiv_data[2,-(1:6)][!is.na(indiv_data[2,-(1:5)])]
lines(x, y, col="red") #september
#lines(x, y, col="black") #september
#lines(x, y) #april
}
}
for(i in 1:length(nindivs)){
#print(i)
to_plot=runif(1)
if(to_plot<0.5){
indiv_data<- stat_data[stat_data[,4]==nindivs[i],]
x<- indiv_data[1,-(1:6)][!is.na(indiv_data[1,-(1:5)])]
y<- indiv_data[2,-(1:6)][!is.na(indiv_data[2,-(1:5)])]
lines(x, y, col="red") #september
#lines(x, y, col="black") #september
#lines(x, y) #april
}
}
plot(hab_ras)
test_num=18
track_file<- paste(dir, test_num, "/Outputs/Indiv_Mov_rep0.txt", sep="")
no_col<- max(count.fields(track_file, sep="\t"))
indiv_mov<- read.table(track_file, skip=1, sep="\t", fill=T, col.names=1:no_col)
rep_data<- indiv_mov[indiv_mov[,1]==0,]
year_data<- rep_data[rep_data[,2]==0,]
year_data<- indiv_mov
stat_data<- year_data
nindivs=(unique(stat_data[,4]))
for(i in 1:length(nindivs)){
#print(i)
to_plot=runif(1)
if(to_plot<0.3){
indiv_data<- stat_data[stat_data[,4]==nindivs[i],]
x<- indiv_data[1,-(1:6)][!is.na(indiv_data[1,-(1:5)])]
y<- indiv_data[2,-(1:6)][!is.na(indiv_data[2,-(1:5)])]
lines(x, y, col="red") #september
#lines(x, y, col="black") #september
#lines(x, y) #april
}
}
getwd()
#for example, if you saved your data in Documents/workshop, your path would be "C:\Documents\workshop"
setwd("C:/Users/Rey/Documents/Indonesia workshop/")
#for example, if you saved your data in Documents/workshop, your path would be "C:\Documents\workshop"
setwd("C:/Users/Rey/Documents/Indonesia workshop/For_participants/")
indo_0 <- vect("gadm41_IDN_0.shp")
#install.packages("ggplot2")
library("terra")
indo_0 <- vect("gadm41_IDN_0.shp")
indo_0 <- vect("gadm41_IDN_shp/gadm41_IDN_0.shp")
##linear models
plot(weight ~ DML, data=squid)
getwd()
#Import the ‘squid1.txt’ file into R using the read.table() function and assign it to a variable named squid.
squid <- read.table("squid1.txt", header=T)
##linear models
plot(weight ~ DML, data=squid)
lm(weight ~ DML, data=squid)
summary(lm1)
lm1 <- lm(weight ~ DML, data=squid)
summary(lm1)
lines(x=squid$DML, y=summary(lm1)$coefficients[1] +summary(lm1)$coefficients[2]*squid$DML, col="red")
mtext(paste("Adj R2= ", round(summary(lm1)$adj.r.squared,digits=2) ,sep=""), side=1, line=-2, adj=1)
plot(lm1)
summary(lm1)$coefficients[1]
summary(lm1)$coefficients[2]
#it is always important to inspect the QQ plots for your linear models to make sure you are not violating any assumptions
par(mfrow=c(2,2))
plot(lm1)
#let's see if we can linearise it
#One approach to linearising relationships is to apply a transformation on one or both variables.
#Try transforming the weight variable with either a natural log (log()) or square root (sqrt()) transformation.
#I suggest you create new variables in the squid dataframe for your transformed variables
squid$weight_log <- log(squid$weight)
par(mfrow=c(1,1))
plot(x=squid$DML, y=squid$weight)
plot(x=squid$DML, y=squid$weight_log)
#let's try the lm again
lm2 <- lm(weight_log ~ DML, data=squid)
summary(lm2)
plot(lm2)
par(mfrow=c(2,2))
plot(lm2)
plot(lm2)
plot(lm1)
#we can try the square root
squid$weight_sqrt <- sqrt(squid$weight)
plot(x=squid$DML, y=squid$weight_sqrt)
#let's try the lm again
lm3 <- lm(weight_sqrt ~ DML, data=squid)
summary(lm3)
par(mfrow=c(2,2))
plot(lm3)
#this might be the best transformation so let's plot the data with the linear model
plot(weight ~ DML, data=squid)
#this might be the best transformation so let's plot the data with the linear model
par(mfrow=c(1,1))
plot(weight ~ DML, data=squid)
lines(x=squid$DML, y=summary(lm3)$coefficients[1] +summary(lm3)$coefficients[2]*squid$DML, col="red")
#this might be the best transformation so let's plot the data with the linear model
par(mfrow=c(1,1))
plot(weight_sqrt ~ DML, data=squid)
lines(x=squid$DML, y=summary(lm3)$coefficients[1] +summary(lm3)$coefficients[2]*squid$DML, col="red")
mtext(paste("Adj R2= ", round(summary(lm3)$adj.r.squared,digits=2) ,sep=""), side=1, line=-2, adj=1)
summary(lm3)
?dotchart
#anytime you want to know what you can change in a function, go into the console window and type ? then the function
?dotchart
?par
?mfrow7
?mfrow
summary(squid)
str(squid)
#factors are categories. these might be treatments, years, sites, etc
#imagine that you want to compare trends across years, sites, etc. this is easier to do with factors
squid$Year_f <- as.factor(squid$year)
squid$month_f <- as.factor(squid$month)
squid$maturity.stage_f <- as.factor(squid$maturity.stage)
#Use the str() function again to check the coding of these new variables.
str(squid)
?dotchart
#Data exploration and Visualisation
#Material written by Dr. Alex Douglas at Aberdeen University
#you can find the instructions here: https://alexd106.github.io/QUADstatR/exercise_4.html for more details and background
getwd()
#Data exploration and Visualisation
#Material written by Dr. Alex Douglas at Aberdeen University
#you can find the instructions here: https://alexd106.github.io/QUADstatR/exercise_4.html for more details and background
getwd()
#set your working directory
setwd("C:/Users/Rey/Documents/Indonesia workshop/For_participants") #this is the path to where you have stored the data
#Import the ‘squid1.txt’ file into R using the read.table() function and assign it to a variable named squid.
squid <- read.table("squid1.txt", header=T)
View(squid)
str(squid) #this gives you all the column names and the data type in each column
#squid is a dataframe, which means it can hold different types of data
#How many observations are in this dataset? How many variables?
summary(squid)
#factors are categories. these might be treatments, years, sites, etc
#imagine that you want to compare trends across years, sites, etc. this is easier to do with factors
squid$Year_f <- as.factor(squid$year)
squid$month_f <- as.factor(squid$month)
squid$maturity.stage_f <- as.factor(squid$maturity.stage)
#Use the str() function again to check the coding of these new variables.
str(squid)
dotchart(squid$DML)
dotchart(squid$weight)
dotchart(squid$nid.length)
dotchart(squid$ovary.weight)
#it looks like nid.length does! this turned out to be a recording error, and we can fix it
which(squid$nid.length > 400) #this gives the row of the value that is the outlier
#the which() function goes through the data and asks which values meet the condition of >400, it will output the row number where this is true
squid$nid.length[11]
#then we can go in and change it
squid$nid.length[11] <- 43.2 #use the <- symbol to assign a new value
#see if it worked
dotchart(squid$nid.length) #yes! the outlier is gone
#anytime you want to know what you can change in a function, go into the console window and type ? then the function
?dotchart
#you can play with different things like colours
dotchart(squid$DML, col="blue")
#or symbols
dotchart(squid$DML, pch=16)
#combine the two
dotchart(squid$DML, pch=16, col="blue")
#If you prefer to create a single figure with all 4 plots you can always split your plotting device into 2 rows and 2 columns.
par(mfrow=c(2,2)) #this tells it that I wand 2 rows and 2 columns
dotchart(squid$DML, main="DML")
dotchart(squid$weight, main="Weight")
dotchart(squid$DML, main="DML")
dotchart(squid$weight, main="Weight")
dotchart(squid$nid.length, main="nid.length")
dotchart(squid$ovary.weight, main="ovary weight")
par(mfrow=c(2,2))
hist(squid$DML, main="DML")
hist(squid$weight, main="Weight")
hist(squid$eviscerate.weight, main="Eviscerate.weight")
hist(squid$ovary.weight, main="Ovary.weight")
par(mfrow=c(2,2))
hist(squid$DML, main="DML", xlab="DML")
hist(squid$weight, main="Weight", xlab="Weight")
hist(squid$eviscerate.weight, main="Eviscerate.weight")
hist(squid$ovary.weight, main="Ovary.weight")
#Scatterplots are great for visualising relationships between two continuous variables.
#Plot the relationship between DML on the x axis and weight on the y axis.
par(mfrow=c(1,1))
plot(x=squid$DML, y=squid$weight)
plot(x=squid$DML, y=squid$weight, xlab="DML", ylab="weight")
#####BOXPLOTS ######
#When visualising differences in a continuous variable between levels of a factor (categorical variable) then a boxplot is your friend
#Create a boxplot to visualise the differences in DML at each maturity stage (don’t forget to use the recoded version of this variable you created)
boxplot(DML ~ maturity.stage_f, data = squid, ylab = "DML", xlab = "Maturity stage")
###### SIMPLE LINEAR MODELS######
##linear models if you're looking at relationships
## this is a linear relationship of the format y=mx+b
lm1 <- lm(weight ~ DML, data=squid) #this format is response variable ~ explanatory variable, so y ~ x
summary(lm1)
#let's see how it looks on top of our data
plot(weight ~ DML, data=squid)
lines(x=squid$DML, y=summary(lm1)$coefficients[1] +summary(lm1)$coefficients[2]*squid$DML, col="red")
mtext(paste("Adj R2= ", round(summary(lm1)$adj.r.squared,digits=2) ,sep=""), side=1, line=-2, adj=1)
#it is always important to inspect the diagnostics plots for your linear models to make sure you are not violating any assumptions
par(mfrow=c(2,2))
plot(lm1)
summary(lm1)$adj.r.squared
#let's see if we can linearise it
#One approach to linearising relationships is to apply a transformation on one or both variables.
#Try transforming the weight variable with either a natural log (log()) or square root (sqrt()) transformation.
#I suggest you create new variables in the squid dataframe for your transformed variables
squid$weight_log <- log(squid$weight) #apply the log() transformation
par(mfrow=c(1,1))
plot(x=squid$DML, y=squid$weight_log)
#let's try the lm again
lm2 <- lm(weight_log ~ DML, data=squid)
par(mfrow=c(2,2))
plot(lm2)
#we can try the square root
squid$weight_sqrt <- sqrt(squid$weight)
par(mfrow=c(1,1))
plot(x=squid$DML, y=squid$weight_sqrt)
#let's try the lm again
lm3 <- lm(weight_sqrt ~ DML, data=squid)
par(mfrow=c(2,2))
plot(lm3)
#this might be the best transformation so let's plot the data with the linear model
par(mfrow=c(1,1))
plot(weight_sqrt ~ DML, data=squid)
lines(x=squid$DML, y=summary(lm3)$coefficients[1] +summary(lm3)$coefficients[2]*squid$DML, col="red") #the y variable here is just mx+b!
mtext(paste("Adj R2= ", round(summary(lm3)$adj.r.squared,digits=2) ,sep=""), side=1, line=-2, adj=1)
summary(lm3)
#Data exploration and Visualisation
#Material written by Dr. Alex Douglas at Aberdeen University
#you can find the instructions here: https://alexd106.github.io/QUADstatR/exercise_4.html for more details and background
getwd()
#Import the ‘squid1.txt’ file into R using the read.table() function and assign it to a variable named squid.
squid <- read.table("squid1.txt", header=T)
#factors are categories. these might be treatments, years, sites, etc
#imagine that you want to compare trends across years, sites, etc. this is easier to do with factors
squid$Year_f <- as.factor(squid$year)
squid$month_f <- as.factor(squid$month)
squid$maturity.stage_f <- as.factor(squid$maturity.stage)
#then we can go in and change it
squid$nid.length[11] <- 43.2 #use the <- symbol to assign a new value
###### SIMPLE LINEAR MODELS######
##linear models if you're looking at relationships
## this is a linear relationship of the format y=mx+b
lm1 <- lm(weight ~ DML, data=squid) #this format is response variable ~ explanatory variable, so y ~ x
#let's try the lm again
lm2 <- lm(weight_log ~ DML, data=squid)
#let's see if we can linearise it
#One approach to linearising relationships is to apply a transformation on one or both variables.
#Try transforming the weight variable with either a natural log (log()) or square root (sqrt()) transformation.
#I suggest you create new variables in the squid dataframe for your transformed variables
squid$weight_log <- log(squid$weight) #apply the log() transformation
#let's try the lm again
lm2 <- lm(weight_log ~ DML, data=squid)
#we can try the square root
squid$weight_sqrt <- sqrt(squid$weight)
#let's try the lm again
lm3 <- lm(weight_sqrt ~ DML, data=squid)
##### USING GGPLOT2 ########
#These figures are perfectly fine to include in a paper, but often, using ggplot creates "nicer" figures
install.packages("ggplot2")
library("ggplot2")
hist_figure <- ggplot(squid, aes(x=DML)) +
geom_histogram() +
labs(title="DML", x="DML", y="Frequency")
hist_figure <- ggplot(squid, aes(x=DML)) +
hist_figure <- ggplot(squid, aes(x=DML)) +
hist_figure <- ggplot(squid, aes(x=DML)) +
geom_histogram() +
labs(title="DML", x="DML", y="Frequency")
hist_figure <- ggplot(squid, aes(x=DML)) +
geom_histogram() +
labs(title="DML", x="DML", y="Frequency")
hist_figure <- ggplot(squid, aes(x=DML)) +
geom_histogram() +
labs(title="DML", xlab="DML", y="Frequency")
plot(hist_figure)
plot(hist_figure)
#you can make multiple histograms for DML by maturity stage
hist_4 <- hist_figure +                     #and now we can take the data from figure1 AND add the multiple panels
facet_wrap(~ maturity.stage_f, nrow = 2) +
theme_minimal()                           #AND remove the grey background
plot(hist_4)
#create a boxplot
box_figure<- ggplot(squid, aes(x=maturity.stage_f, y=DML))
hist_figure <- ggplot(squid, aes(x=DML))  #we name our plot so that we can call it at any time
plot(hist_figure)
hist_figure <- ggplot(squid, aes(x=DML)) + #we name our plot so that we can call it at any time
#the + here is very important! This is how you add elements to your plot
geom_histogram()                         #so here, we are saying "make a ggplot object" AND create a histogram from the data
plot(hist_figure)
summary(squid)
plot(hist_figure)
hist_figure <- ggplot(squid, aes(x=DML)) + #we name our plot so that we can call it at any time
#the + here is very important! This is how you add elements to your plot
geom_histogram() +                        #so here, we are saying "make a ggplot object" AND create a histogram from the data
labs(title="DML", x="DML", y="Frequency") #AND give it particular labels
plot(hist_figure)
mean(squid$DML)
plot(hist_4)
#####BOXPLOTS ######
#When visualising differences in a continuous variable between levels of a factor (categorical variable) then a boxplot is your friend
#Create a boxplot to visualise the differences in DML at each maturity stage (don’t forget to use the recoded version of this variable you created)
boxplot(DML ~ maturity.stage_f, data = squid, ylab = "DML", xlab = "Maturity stage")
#create a boxplot
box_figure<- ggplot(squid, aes(x=maturity.stage_f, y=DML)) +
geom_boxplot() +
theme_minimal()
plot(box_figure)
##one of the best things about ggplot is that it's easy to save a high resolution figure
ggsave("boxplot_DML.jpeg", box_figure, device="jpeg", dpi=1500 )
#you can make multiple histograms for DML by maturity stage
hist_4 <-
hist_figure +                     #and now we can take the data from figure1 AND add the multiple panels
facet_wrap(~ maturity.stage_f, nrow = 2) +
theme_minimal()                           #AND remove the grey background
ggplot(squid, aes(x=DML)) + #we name our plot so that we can call it at any time
#the + here is very important! This is how you add elements to your plot
geom_histogram() +                        #so here, we are saying "make a ggplot object" AND create a histogram from the data
labs(title="DML", x="DML", y="Frequency") #AND give it particular labels
x=5
x
x+3
x+7
5+3
indo_0 <- vect("gadm41_IDN_shp/gadm41_IDN_0.shp")
#install.packages("ggplot2")
library("terra")
indo_0 <- vect("gadm41_IDN_shp/gadm41_IDN_0.shp")
plot(indo_0)
#more detail, districts
indo_1<- vect("gadm41_IDN_shp/gadm41_IDN_1.shp")
plot(indo_1)
#EVEN more detail
indo_2<- vect("gadm41_IDN_shp/gadm41_IDN_2.shp")
plot(indo_2)
##we will continue on with indo_0
#to make our lives easier, we turn this into an sf object
#you don't need to worry about why, it is for conserving latitude/longitude
indo_sf <- st_as_sf(indo_0)
library(sf)
##we will continue on with indo_0
#to make our lives easier, we turn this into an sf object
#you don't need to worry about why, it is for conserving latitude/longitude
indo_sf <- st_as_sf(indo_0)
##we will continue on with indo_0
#to make our lives easier, we turn this into an sf object
#you don't need to worry about why, it is for conserving latitude/longitude
indo_sf <- st_as_sf(indo_0)
#we can plot all of Indonesia in a basic plot
figure1 <-  #we name our plot so that we can call it at any time
ggplot() + #this is the basic ggplot object. you need to call this anytime you make a new ggplot
#the + here is very important! This is how you add elements to your plot
#so here, we are saying "make a ggplot object" AND take data from indo_0, with these colours
geom_sf(data = indo_sf, # sf format
color = "black",
fill = "gray90"
)
plot(figure1)
figure2 <- figure1 + #and now we can take the data from figure1 AND add coord_sf details
coord_sf(xlim = c(100, 130), #x axis coordinates (longitude)
ylim = c(-11, -5), #y axis coordinates (latitude)
expand = FALSE)
plot(figure2)
figure3 <- figure2 + #take figure2 AND edit the axes
scale_x_continuous(labels = ~ paste0(.x, "°", "N")) + #the scale_x_continuous() object will edit the x axis
scale_y_continuous(labels = ~ paste0(.x, "°", "E")) #the scale_y_continuous() object will edit the y axis
plot(figure3)
figure3 <- figure2 + #take figure2 AND edit the axes
scale_y_continuous(labels = ~ paste0(.x, "°", "N")) + #the scale_x_continuous() object will edit the x axis
scale_x_continuous(labels = ~ paste0(.x, "°", "E")) #the scale_y_continuous() object will edit the y axis
plot(figure3)
figure4<- figure3 +
theme(panel.background = element_blank(), #this gets rid of the background
axis.line = element_line(), #this makes sure the axis line is still there
panel.border = element_rect(colour = "black", fill=NA, linewidth=1)) #add a box around it
plot(figure4)
#create a dataframe of your coordinates you want to plot
sites<- data.frame(Lat=c(-7, -7.5), Long=c(110,113))
View(sites)
figure5 <- figure4 +
geom_point(data = sites,
aes(x = Long,
y = Lat),
size = 5, #how big are the dots?
shape = 21, #21 is the code for dots
fill = "black" #colour
)
plot(figure5)
figure5 <- figure4 +
geom_point(data = sites,
aes(x = Long,
y = Lat),
size = 2, #how big are the dots?
shape = 21, #21 is the code for dots
fill = "black" #colour
)
plot(figure5)
figure6 <- figure5 +
annotate("text",
label = c("JAVA"),
x = c(105),
y = c(-9),
color = "gray48",
size = 5.5)
plot(figure6)
#first we create the insert
inset_map <- indo_sf %>%
ggplot() + #it gets its own ggplot object
geom_sf() +
geom_rect(aes(xmin = 100, #we create a rectangle within Indonesia that shows where Java is
xmax = 130,
ymin =-11,
ymax = -5),
color = "red",
linewidth = 1,
fill = NA) +
labs(x = NULL,
y = NULL) +
#and we play with all the theme elements, getting rid of axes etc
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
axis.title=element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = "lightskyblue"),
panel.border = element_rect(fill = NA,
linewidth = 1),
) +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
#and add a label
annotate("text",
label = "INDONESIA",
x = c(125),
y = c(4),
color = "black",
size = c(3),
fontface = "bold"
)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.7,
bottom = 0.7,
right = 1,
top = 1,
align_to = "full"
)
install.packages("patchwork")
library(patchwork)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.7,
bottom = 0.7,
right = 1,
top = 1,
align_to = "full"
)
plot(figure7)
class(indo_0)
?ext
java_ext<- ext(100,130,-11,-5)
java_crop <- crop(indo_0,java_ext)
plot(java_crop)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.7,
bottom = 0.7,
right = 1,
top = 1
)
plot(figure7)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.7,
bottom = 0.7,
right = 1,
top = 1,
align="plot"
)
plot(figure7)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.75,
bottom = 0.7,
right = 1,
top = 1,
align="plot"
)
plot(figure7)
figure7 <- figure6 +
inset_element(inset_map,
left = 0.75,
bottom = 0.7,
right = 1,
top = .5,
align="plot"
)
plot(figure7)
